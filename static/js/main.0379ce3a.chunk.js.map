{"version":3,"sources":["Components/Controls/Controls.js","Components/Statistics/Statistics.js","Components/Section/Section.js","Components/Notification/Notification.js","Components/Feedback.js","App.js","index.js","Components/Section/Section.module.css","Components/Controls/Controls.module.css"],"names":["FeedbackOptions","options","onLeaveFeedback","className","map","option","type","s","controlBtn","value","toLowerCase","onClick","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","container","Notification","message","Feedback","state","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","event","setState","prevState","target","this","Component","App","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"2SAwBeA,MArBf,YAAuD,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,gBAChC,OACI,qBAAKC,UAAU,WAAf,SACKF,EAAQG,KAAI,SAAAC,GAAM,OACf,wBACAC,KAAK,SACLH,UAAWI,IAAEC,WACbC,MAAOJ,EAAOK,cAEdC,QAAST,EALT,SAMCG,GAFIA,EAAOK,qBCWbE,MApBf,YAAuE,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,mBAC7C,OACI,gCACI,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,W,gBCEGC,MATf,YAAsC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SACtB,OACI,0BAASjB,UAAWI,IAAEc,UAAtB,UACI,oBAAIlB,UAAWI,IAAEY,MAAjB,SAAyBA,IACxBC,MCFEE,MAJf,YAAmC,IAAXC,EAAU,EAAVA,QACpB,OAAQ,4BAAIA,KCqEDC,E,4MA9DfC,MAAQ,CACJZ,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAoBTW,mBAAqB,WAAO,IAAD,EACM,EAAKD,MAClC,OAFuB,EAChBZ,KADgB,EACVC,QADU,EACDC,K,EAI1BY,gCAAkC,WAC9B,OAAOC,KAAKC,MAAM,IAAI,EAAKH,qBAAqB,EAAKD,MAAMZ,O,EAG/DX,gBAAkB,SAAC4B,GACf,OAAO,EAAKC,UAAS,SAAAC,GAAS,sBACzBF,EAAMG,OAAOxB,MAAQuB,EAAUF,EAAMG,OAAOxB,OAAS,O,uDAIpD,IAAD,EAC0ByB,KAAKT,MAA5BZ,EADH,EACGA,KAAMC,EADT,EACSA,QAASC,EADlB,EACkBA,IACvB,OACA,sBAAKZ,UAAU,WAAf,UACI,eAAC,EAAD,CAASgB,MAAM,wBAAf,UACA,cAAC,EAAD,CACIlB,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiBgC,KAAKhC,kBACQ,IAA5BgC,KAAKR,sBAA8B,cAAC,EAAD,CAAcH,QAAQ,2BAGhC,IAA5BW,KAAKR,uBACR,cAAC,EAAD,CAASP,MAAM,aAAf,SACA,cAAC,EAAD,CACIN,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOkB,KAAKR,qBACZT,mBAAoBiB,KAAKP,6C,GAzDdQ,aCGRC,MANf,WACE,OACE,cAAC,EAAD,KCAJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCT1BC,EAAOC,QAAU,CAAC,UAAY,2BAA2B,MAAQ,yB,kBCAjED,EAAOC,QAAU,CAAC,WAAa,gC","file":"static/js/main.0379ce3a.chunk.js","sourcesContent":["import propTypes from 'prop-types';\r\nimport s from './Controls.module.css';\r\n\r\nfunction FeedbackOptions ({options, onLeaveFeedback}) {\r\n    return (\r\n        <div className=\"controls\">\r\n            {options.map(option => \r\n                <button \r\n                type=\"button\" \r\n                className={s.controlBtn}\r\n                value={option.toLowerCase()} \r\n                key={option.toLowerCase()} \r\n                onClick={onLeaveFeedback}>\r\n                {option}\r\n                </button>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: propTypes.arrayOf(propTypes.string)\r\n}\r\n\r\nexport default FeedbackOptions;","import propTypes from 'prop-types';\r\n\r\nfunction Statistics ({good, neutral, bad, total, positivePercentage}) {\r\n    return (\r\n        <div>\r\n            <p>Good: {good}</p>\r\n            <p>Neutral: {neutral}</p>\r\n            <p>Bad: {bad}</p>\r\n            <p>Total: {total}</p>\r\n            <p>Positive feedback: {positivePercentage}%</p>\r\n        </div>\r\n     );\r\n}\r\n\r\nStatistics.propTypes = {\r\n    good: propTypes.number.isRequired,\r\n    neutral: propTypes.number.isRequired,\r\n    bad: propTypes.number.isRequired,\r\n    total: propTypes.number,\r\n    positivePercentage: propTypes.number\r\n}\r\n\r\nexport default Statistics;","import s from './Section.module.css';\r\n\r\nfunction Section ({title, children}) {\r\n    return (\r\n        <section className={s.container}>\r\n            <h2 className={s.title}>{title}</h2>\r\n            {children}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Section;","function Notification ({message}) {\r\n    return (<p>{message}</p>)\r\n}\r\n\r\nexport default Notification;","import React, {Component} from 'react';\r\n// import propTypes from 'prop-types';\r\nimport FeedbackOptions from './Controls/Controls';\r\nimport Statistics from './Statistics/Statistics';\r\nimport Section from './Section/Section';\r\nimport Notification from './Notification/Notification';\r\n\r\nclass Feedback extends Component {\r\nstate = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0\r\n};\r\n\r\n// onGoodClick = () => {\r\n//     this.setState(prevState => ({\r\n//         good: prevState.good + 1\r\n//     }))\r\n// };\r\n\r\n// onBadClick = () => {\r\n//     this.setState(prevState => ({\r\n//         bad: prevState.bad + 1\r\n//     }))\r\n// };\r\n\r\n// onNeutralClick = () => {\r\n//     this.setState(prevState => ({\r\n//         neutral: prevState.neutral + 1\r\n//     }))\r\n// }\r\ncountTotalFeedback = () => {\r\n    const {good, neutral, bad} = this.state;\r\n    return (good + neutral + bad);\r\n}\r\n\r\ncountPositiveFeedbackPercentage = () => {\r\n    return Math.round(100/this.countTotalFeedback()*this.state.good);\r\n}\r\n\r\nonLeaveFeedback = (event) => {\r\n    return this.setState(prevState => ({\r\n        [event.target.value]: prevState[event.target.value] + 1\r\n    }))\r\n}\r\n\r\nrender() {\r\n    const { good, neutral, bad } = this.state;\r\n    return (\r\n    <div className=\"feedback\">\r\n        <Section title=\"Please leave feedback\">\r\n        <FeedbackOptions \r\n            options={[\"Good\", \"Neutral\", \"Bad\"]} \r\n            onLeaveFeedback={this.onLeaveFeedback} />\r\n            {(this.countTotalFeedback()===0) && (<Notification message=\"No feedback given\" />)}\r\n        </Section>\r\n        \r\n        {!(this.countTotalFeedback()===0) && (\r\n        <Section title=\"Statistics\">\r\n        <Statistics \r\n            good={good} \r\n            neutral={neutral} \r\n            bad={bad} \r\n            total={this.countTotalFeedback()} \r\n            positivePercentage={this.countPositiveFeedbackPercentage()} />\r\n        </Section>)}\r\n    </div>);\r\n}\r\n};\r\n\r\nexport default Feedback;\r\n","import React from 'react';\nimport './App.css';\nimport Feedback from './Components/Feedback';\n\nfunction App() {\n  return (\n    <Feedback />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__10RpX\",\"title\":\"Section_title__1KBRP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controlBtn\":\"Controls_controlBtn__3tdWd\"};"],"sourceRoot":""}